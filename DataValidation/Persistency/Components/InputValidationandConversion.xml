<?xml version="1.0"?>
<ExtComponent xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <Name>InputValidationandConversion</Name>
  <Parent />
  <Previous>InputValidation</Previous>
  <LastModifiedBy>ClareStone</LastModifiedBy>
  <LastModifiedOn>2025-04-10T15:50:19.576469+01:00</LastModifiedOn>
  <CreatedBy>ClareStone</CreatedBy>
  <CreatedOn>2025-03-10T15:03:16.617423+00:00</CreatedOn>
  <Folder>false</Folder>
  <LastModified>2025-04-10T15:50:19.576469+01:00</LastModified>
  <Notes />
  <IsExpanded>true</IsExpanded>
  <ProjectScope>true</ProjectScope>
  <Code>Function ValidateConvertLifeBasis(fieldinput1 As String, fieldinput2 As String, fieldinput3 As String) As String
    Dim value As String    
    If fieldinput1 &lt;&gt; "S" And fieldinput1 &lt;&gt; "JLF" And fieldinput1 &lt;&gt; "JLL" Then
        If fieldinput1 = "" And fieldinput3 = ""
            Log.Report(fieldinput2 &amp; " LifeBasis changed from blank to S")
            value = "S"
        ElseIf fieldinput1 = "" And fieldinput3 &lt;&gt; ""
            Log.Report(fieldinput2 &amp; " LifeBasis changed from blank to JLF")
            value = "JLF"
        ElseIf fieldinput3 = ""
            Log.Report(fieldinput2 &amp; " LifeBasis changed from " &amp; fieldinput1 &amp; " to S")
            value = "S"        
        Else
            Log.Report(fieldinput2 &amp; " LifeBasis changed from " &amp; fieldinput1 &amp; " to JLF")        
            value = "JLF"
        End If     
    Else
        value = fieldinput1   
    End if
    Return value
End Function
Function ValidateConvertDOB(fieldinput1 As Date, fieldinput2 As String, fieldinput3 As Integer, fieldinput4 As Integer, fieldinput5 As Date, fieldinput6 As Integer, fieldinput7 As String) As Double
    Dim Agevalue As Double
    If val(DateSpan.TermInYears(fieldinput1, fieldinput5)) &lt; fieldinput3
        If fieldinput6 = 1
            Log.Report(fieldinput2 &amp; " Age of policyholder1 less than minimum allowed so changed to " &amp; fieldinput3)
        ElseIf fieldinput7 &lt;&gt; "S"
            Log.Report(fieldinput2 &amp; " Age of policyholder2 less than minimum allowed so changed to " &amp; fieldinput3)
        End If
        Agevalue = fieldinput3
    ElseIf val(DateSpan.TermInYears(fieldinput1, fieldinput5)) &gt; fieldinput4
        If fieldinput6 = 1
            Log.Report(fieldinput2 &amp; " Age of policyholder1 greater than maximum allowed so changed to " &amp; fieldinput4)
        ElseIf fieldinput7 &lt;&gt; "S"
            Log.Report(fieldinput2 &amp; " Age of policyholder2 greater than maximum allowed so changed to " &amp; fieldinput4)
        End If
        Agevalue = fieldinput4  
    Else
        Agevalue = val(DateSpan.TermInYears(fieldinput1, fieldinput5))   
    End If
    Return Agevalue       
End Function
Function ValidateConvertSex(fieldinput1 As String, fieldinput2 As String, fieldinput3 As Integer, fieldinput4 As String) As Integer
    If fieldinput1 = "" And fieldinput3 = 1
        Log.Report(fieldinput2 &amp; " Sex1 not populated")
    ElseIf fieldinput1 = "" And (fieldinput4 = "JLL" Or fieldinput4 = "JLF")
        Log.Report(fieldinput2 &amp; " Sex2 not populated and Lifebasis = " &amp; fieldinput4)
    ElseIf fieldinput1 = ""     
    ElseIf Left(fieldinput1, 1) &lt;&gt; "M" And Left(fieldinput1, 1) &lt;&gt; "F"
        If fieldinput3 = 1
            Log.Report(fieldinput2 &amp; " Sex1 not set to accepted value M/F/Male/Female")
        Else
            Log.Report(fieldinput2 &amp; " Sex2 not set to accepted value M/F/Male/Female")
        End If
    End If
    If Left(fieldinput1, 1) = "M"
        Return 0
    Else IF Left(fieldinput1, 1) = "F"
        Return 1
    End If    
End Function
Function ValidateConvertSmoker(fieldinput1 As String, fieldinput2 As String, fieldinput3 As Integer, fieldinput4 As String) As String
    If fieldinput1 &lt;&gt; "Y" And fieldinput1 &lt;&gt; "N" And fieldinput1 &lt;&gt; "U"
        If fieldinput3 = 1
            Log.Report(fieldinput2 &amp; " Smoker1 status is not set to accepted value and will be changed to Y")
        ElseIf fieldinput4 &lt;&gt; "S"
            Log.Report(fieldinput2 &amp; " Smoker2 status is not set to accepted value and will be changed to Y")
        End If
        Return "Y"          
    Else
        Return fieldinput1    
    End If    
End Function
Function ValidatePremFreq(fieldinput1 As Integer, fieldinput2 As String) As Integer
    If (fieldinput1 &lt;&gt; 0 And fieldinput1 &lt;&gt; 1 And fieldinput1 &lt;&gt; 2 And fieldinput1 &lt;&gt; 3 And fieldinput1 &lt;&gt; 4 And fieldinput1 &lt;&gt; 12)
        Log.Report(fieldinput2 &amp; " PremFreq is not set to allowed value 0/1/2/3/4/12 and will be changed to 12")
        Return 12
    End If
    Return fieldinput1
End Function
Function ValidateConvertProduct(fieldinput1 As String, fieldinput2 As String) As String
    If (fieldinput1 &lt;&gt; "TERM" And fieldinput1 &lt;&gt; "ENDOW" And fieldinput1 &lt;&gt; "WOL" And fieldinput1 &lt;&gt; "PURE_ENDOW")
        Log.Report(fieldinput2 &amp; " Product is not set to allowed product type - THIS MUST BE ADDRESSED")
    End If
    Return fieldinput1    
End Function</Code>
</ExtComponent>